/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        HMR: HMR {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 17 16 15 14 13 12 24 26 25 27 28 29>;
            require-prior-idle-ms = <100>;
        };

        HML: HML {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <100>;
            hold-trigger-key-positions = <30 18 6 7 19 31 32 20 8 10 9 21 33 35 22 34 23 11>;
        };
    };

    combos {
        compatible = "zmk,combos";

        clr {
            bindings = <&bt BT_CLR>;
            key-positions = <24 35 40 37>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "base";
            bindings = <
&kp TAB                &kp Q         &kp W            &kp F        &kp P              &kp B       &kp J      &kp L               &kp U        &kp Y             &kp SEMI      &kp LS(LA(LC(LG(Q))))
&kp ESC                &HML LCTRL A  &HML LEFT_ALT R  &HML LGUI S  &HML LEFT_SHIFT T  &kp G       &kp M      &HMR RIGHT_SHIFT N  &HMR RGUI E  &HMR RIGHT_ALT I  &HMR RCTRL O  &kp RET
&kp LS(LA(LC(LG(E))))  &kp Z         &kp X            &kp C        &kp D              &kp V       &kp K      &kp H               &kp COMMA    &kp DOT           &kp FSLH      &kp LA(LS(LC(LG(M))))
                                                      &kp ESC      &mo 1              &kp BSPC    &kp SPACE  &mo 2               &caps_word
            >;
        };

        ctrl {
            display-name = "ctrl";
            bindings = <
&bt BT_SEL 1  &trans    &kp C_VOL_DN  &kp C_MUTE    &kp C_VOL_UP  &HML LG(LS(N4)) LS(LG(S))    &kp DOWN  &kp RIGHT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &kp C_BRI_DN  &kp LG(C_BRI_UP)
&bt BT_SEL 0  &kp N1    &kp N2        &HML LGUI N3  &kp N4        &kp N5                       &kp N6    &kp N7     &HMR RGUI N8    &kp N9           &kp N0        &trans
&bt BT_CLR    &mkp MB2  &kp C_PREV    &kp C_PP      &kp LGUI      &mkp MB1                     &kp UP    &kp LEFT   &mmv MOVE_UP    &mmv MOVE_LEFT   &trans        &trans
                                      &trans        &trans        &trans                       &trans    &trans     &trans
            >;
        };

        sym {
            display-name = "sym";
            bindings = <
&trans  &kp GRAVE  &kp TILDE  &kp DQT         &kp SQT    &kp PRCNT    &kp CARET  &kp LPAR  &kp RPAR        &kp DLLR  &kp PIPE  &trans
&trans  &kp MINUS  &kp UNDER  &HML LGUI PLUS  &kp EXCL   &kp EQUAL    &kp COLON  &kp LBRC  &HMR RGUI RBRC  &kp STAR  &kp SEMI  &trans
&trans  &trans     &trans     &kp HASH        &kp QMARK  &kp AMPS     &kp AT     &kp LBKT  &kp RBKT        &kp BSLH  &kp FSLH  &trans
                              &trans          &trans     &trans       &trans     &trans    &trans
            >;
        };
    };
};
