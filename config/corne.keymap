/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        HMR: HMR {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 17 16 15 14 13 12 24 26 25 27 28 29 36 37 38 41 40 39>;
            require-prior-idle-ms = <100>;
        };

        HML: HML {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <100>;
            hold-trigger-key-positions = <39 41 40 38 37 36 30 18 6 7 19 31 32 20 8 10 9 21 33 35 22 34 23 11>;
        };
    };

    combos {
        compatible = "zmk,combos";

        qwerty {
            bindings = <&tog 3>;
            key-positions = <37 40>;
            layers = <0 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak {
            display-name = "Base";
            bindings = <
&kp TAB            &kp Q         &kp W  &kp F            &kp P              &kp B       &kp J    &kp L               &kp U                 &kp Y    &kp SEMI      &caps_word
&kp ESC            &HML LCTRL A  &kp R  &kp S            &HML LEFT_SHIFT T  &kp G       &kp M    &HMR RIGHT_SHIFT N  &kp E                 &kp I    &HMR RCTRL O  &kp SQT
&kp LS(LA(LCTRL))  &kp Z         &kp X  &HML LEFT_ALT C  &kp D              &kp V       &kp K    &kp H               &HMR RIGHT_ALT COMMA  &kp DOT  &kp FSLH      &kp LS(LA(LG(LCTRL)))
                                        &mt LGUI ESC     &mo 1              &kp BSPC    &kp RET  &mo 2               &kp SPACE
            >;
        };

        lower_layer {
            display-name = "Lower";
            bindings = <
&bt BT_CLR    &kp N1             &kp N2        &kp N3      &kp N4        &kp N5           &kp N6              &kp N7            &kp N8            &kp N9               &kp N0         &trans
&bt BT_SEL 1  &kp LC(LA(LS(Q)))  &kp C_VOL_DN  &kp C_MUTE  &kp C_VOL_UP  &kp LS(LG(S))    &kp LEFT            &kp DOWN          &kp UP            &kp RIGHT            &kp LG(MINUS)  &kp LG(EQUAL)
&bt BT_SEL 0  &kp C_BRI_DN       &kp C_PREV    &kp C_PP    &kp C_NEXT    &kp C_BRI_UP     &kp LG(LEFT_ARROW)  &kp LG(LS(LBKT))  &kp LG(LS(RBKT))  &kp LG(RIGHT_ARROW)  &trans         &trans
                                               &trans      &trans        &trans           &trans              &trans            &trans
            >;
        };

        raise_layer {
            display-name = "Raise";
            bindings = <
&kp GRAVE  &kp TILDE  &kp PIPE  &kp SQT               &kp DQT       &kp PRCNT    &kp HASH   &kp LPAR  &kp RPAR  &kp CARET  &kp DLLR  &kp BSPC
&kp UNDER  &kp MINUS  &kp PLUS  &kp EQUAL             &kp EXCL      &kp AMPS     &kp COLON  &kp LBRC  &kp RBRC  &kp LT     &kp GT    &kp GRAVE
&trans     &trans     &trans    &kp NON_US_BACKSLASH  &kp QUESTION  &kp UNDER    &kp AT     &kp LBKT  &kp RBKT  &trans     &trans    &trans
                                &trans                &trans        &trans       &trans     &trans    &trans
            >;
        };

        qwerty {
            display-name = "qwerty";
            bindings = <
&trans  &kp Q         &kp W  &kp E            &kp R              &kp T     &kp Y   &kp U               &kp I                 &kp O    &kp P            &trans
&trans  &HML LCTRL A  &kp S  &kp D            &HML LEFT_SHIFT F  &kp G     &kp H   &HMR RIGHT_SHIFT J  &kp K                 &kp L    &HMR RCTRL SEMI  &trans
&trans  &kp Z         &kp X  &HML LEFT_ALT C  &kp V              &kp D     &kp N   &kp M               &HMR RIGHT_ALT COMMA  &kp DOT  &kp FSLH         &trans
                             &trans           &trans             &trans    &trans  &trans              &trans
            >;
        };
    };
};
